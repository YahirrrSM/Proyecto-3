Program difusion_de_calor
implicit none 
integer :: n, m, i, j , k, p
real :: xmin, xmax, hx, ht, lamb, alf2, t
real, allocatable, dimension (:) :: x, w, z 

open(100,file = 'input_data.inp')
read(100,*)
read(100,*)n, m
read(100,*)
read(100,*)xmin, xmax, ht, hx
close(100) 
alf2 = 1
hx = (xmax-xmin)/real(n)
allocate(x(0:n), w(0:n), z(0:n))
do i = 0, n 
        x(i) = xmin + hx*real(i)
        end do 
lamb = 0.05



w(0) = 0
w(n-1) = 0
do i = 1, n-2
    w(i) = fun(x(i))
        end do

   
do j = 1, m

        t = 1 + j * ht
z(0) = 0 
z(n) = 0 
   do i = 1, n-2
        z(i) = lamb*(w(i+1)+w(i-1))+(1.0-2.0*lamb)*w(i) 
        end do
        do i = 1, n-2 
                w(i) = z(i)
      !         write(j+100, *) x(i), w(i)  
                end do
  !      write(2000+j, 100)'# vtk DataFile Version 3.0'
  !     write(2000+j, 100)'vtk_cells mpcd' 
  !      write(2000+j, 100)'ASCII' 
  !      write(2000+j, 100)'DATASET STRUCTURED_GRID' 
  !      write(2000+j, 110)'DIMENSIONS', n+1, 20,20
  !      write(2000+j, 120)'POINTS', (n+1)*20*20, 'float'
!Imprimiento posiciones en las celdas

   !     do k = 1, 20
   !            do p = 1, 20
   !                     do i = 0, n 
   !                      write(2000+j,122) real(i)*hx, real(p)*hx, real(k)*hx
   !                     end do 

   !             end do 
   !       end do

    !    write(2000+j, *)
    !    write(2000+j, *)'POINT_DATA', (n+1)*20*20
    !    write(2000+j, *)'SCALARS Temperatura float' 
    !    write(2000+j, *)'LOOKUP_TABLE default' 
    !    do k = 1, 20
    !           do p = 1, 20
    !                  do i = 0, n 
    !                   write(2000+j, 122)w(i) 
    !                   end do   
    !                end do 
    !          end do 

end do
open(200, file = "soluciones.out")
write(*,*)"tiempo final", t
do i = 0, n-1 
write(200,*)"w", i, w(i)
end do 
close(200)


100 format(A)
110 format('',A,3I8)
120 format('',A,I12,A)
122 format(3f15.8)


contains 
        function fun(x) result(y) 
            implicit none 
            real :: x, y
            real, parameter :: pi = 3.1415926538

             y = sin(pi*x)
        
                end function fun 

        end program difusion_de_calor
